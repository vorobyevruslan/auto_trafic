Основной Алгоритм:
1)Инициализация координат-областей, в зависимости от переменной area, которая соответствует локации
2)Запуск нейросети Yolo (для создания текстового файла, состоящего из всех задетекченных объектов на изображении)
  Каждая строчка соответствует каждому найденному объекту
  Вид строчки: "left_x right_x top_y bot_y object_class accuracy"
3)Запуск алгоритма трекинга и аналитики для каждой из областей пункта 1)
4)Удаление текстового файла и завершение кода

Набор данных:
1)auto_trafic - лежит в yolo/data/
  Состоит из 100 изображений из разных локаций, 100 текстовых файлов с координатами боксов, classes.txt - номера размеченных классов
  
CFG-файл для нейросети:
1)https://www.dropbox.com/sh/n8lub3rdzjt9g5r/AABp5H4sd12WN12lrbQ12L3ga?dl=0 
  Создается для каждого набора данных.
  В данном случае используется папка auto_trafic, в которой лежит 6 файлов, необходимых для обучения и дальнейшего получения результатов
  a)bash-скрипт для быстрого запуска алгоритма подсчёта нейросетью (auto_trafic)
  b)конфиг, состоящий из описания слоёв нейросети и их конфигураций для обучения (auto_trafic_train.cfg)
  c)конфиг, состоящий из описания слоёв нейросети и их конфигураций для подсчёта (auto_trafic.cfg)
  d)файл, с описанием расположения данных и файлов (auto_trafic.data)
  e)файл, с номерами классов(auto_trafic.names)
  f)веса, полученные после обучения сети, используются для подсчёта(auto_trafic.weights)

Нейросеть Yolo:
1)Вызов нейросети осуществляется через bash-скрипт с использованием библиотеки request (./bash-script filename)
  Баш-скрипт лежит внутри папки с конфигурациями, описан в пункте a)
2)Основная функция лежит в скрипте yolo/src/demo.c: void demo()
  В ней:
  1)Идет подргрузка весов из папки с конфигурациями
  2)Подгружаются все конфигурации сети
  3)Происходит разбиение видео на отдельные кадры, которые идут в обработку нейросетью
  4)После обработки кадра данные по каждому кадру пишутся в текстовый файл с названием, соответствующим названию видео
    {"left_x right_x top_y bot_y object_class accuracy"} x N
    -1 -1 -1 -1 -1 -1
    То есть записываются координаты каждого бокса найденного на кадре объекта и в конце дописывается строчка из -1 для отделения кадров
  5)По окончанию кадров все буферы освобождаются и алгоритм заканчивает свою работу
3)По завершению работы нейросети в папке с видео создастся текстовый файл в указаном выше формате для дальнейшей аналитической обработки

Алгоритм трекинга и аналитики (функция workWithCoords):
1)Открывается на чтение файл, созданный нейросетью и построчно происходит анализ координат объектов для выявления движений в областях
2)Для каждого бокса вычисляется две координаты - центр бокса (x0,y0).
3)Если эти координаты лежат внутри заданной области (функция point_in_path), 
  тогда происходит просмотр наличия записей в словаре dictionary (словарь состоит из ключей-айдишников трекируемых на кадре объектов)
  и добавление информации в словарь по ключу, 
  при условии нахождения ближайшего трека с предыдущего кадра (так же накладывается условие минимального расстояния до трека - thresh_distance)
  
  Элемент словаря это список [x0,y0,N,x,y,M]:
  a)x0,y0 - текущие координаты центра бокса
  b)N - количество кадров подряд, в которых не нашлось ближайшего трека для данного ключа
  c)x,y - начальные координаты трека
  d)M - длина пути трека
4)Если встречается строчка из -1, выполняется аналитика элементов словаря (треков), на предмет их окончания
  Проверка происходит анализом элемента N - если он больше порога (thresh_end_track), 
  тогда считается, что трек завершен и его можно запомнить, как оконченный
5)За количество треков внутри зоны отвечает переменная miss, 
  но инкриментирование данной переменной просходит только если у оконченного трека элемент M (пройденный путь) больше порога (thresh_path)

У алгоритма присутствует возможность отладки, при которой будут сохраняться изображения с треками внутри заданных зон.
Для этого необходимо поставить в переменной debug=True. 

Так же можно просмотреть процесс формирования треков. 
Для этого необходимо указать в переменной speed число, отвечающее за скорость просмотра (рекомендуемое - 60)
